{"version":3,"sources":["User.js","Comment.js","Post.js","PostList.js","api.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","className","authorData","name","email","address","street","suite","city","Comment","cmnt","body","Post","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showComments","setState","commentsView","state","post","title","src_User","key","author","id","onClick","commentData","map","item","src_Comment","React","Component","PostList","_ref","items","src_Post","getPost","fetch","then","res","json","getUser","getComment","App","loadData","asyncToGenerator","regenerator_default","mark","_callee","posts","users","comments","wrap","_context","prev","next","sent","buttonText","setTimeout","getPosts","isLoaded","stop","objectSpread","find","user","userId","filter","comnt","postId","_this$state","src_PostList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bf91690.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <div className=\"author\">\r\n      <span>Name: </span> {props.authorData.name}, \r\n      <span> e-mail: </span> {props.authorData.email}, \r\n      <span> Address: </span> {props.authorData.address.street}, \r\n      {props.authorData.address.suite},\r\n      {props.authorData.address.city}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\n\r\nfunction Comment(props) {\r\n  return (\r\n    <div className=\"comment\">\r\n      <p>{props.cmnt.body}</p>\r\n      <div className=\"author\">\r\n      <span>Name: </span> {props.cmnt.name}, \r\n      <span> e-mail: </span> {props.cmnt.email}, \r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\nimport User from './User';\nimport Comment from './Comment'\n\nclass Post extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      commentsView: false,\n    }\n  }\n\n  showComments = () => {\n    this.setState({\n      commentsView: !this.state.commentsView,\n    });\n  }\n\nrender () {\n  return (\n    <section>\n      <div className=\"item\">\n        <p className=\"item__title\">{this.props.post.title}</p>\n        <p className=\"item__text\">{this.props.post.body}</p>\n        <User key={this.props.post.author.id} authorData={this.props.post.author} />\n        <button className=\"comments__button\" onClick = {this.showComments}> \n          {this.state.commentsView ?\n            'Hide comments' :\n            'Show comments'\n          }\n        </button>\n      </div>\n      {this.state.commentsView ?\n        (\n          <div className=\"comments\">\n          {this.props.post.commentData.map(item => (<Comment key={item.id} cmnt={item} />) \n      )}\n    </div>) : null  \n        }\n  </section>\n  );\n}\n}\n\nexport default Post;\n","import React from 'react';\nimport Post from './Post';\n\nconst PostList = ({ items }) => (\n  <div>\n    {items.map(item => (\n      <Post key={item.id} post={item} />\n    ))};\n  </div>\n)\n\nexport default PostList;","export const getPost = () => {\r\n  return fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const getUser = () => {\r\n  return fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(res => res.json());\r\n}\r\n\r\nexport const getComment = () => {\r\n  return fetch(\"https://jsonplaceholder.typicode.com/comments\")\r\n        .then(res => res.json());\r\n}","import React from 'react';\nimport PostList from './PostList';\nimport './App.css';\nimport { getPost, getUser, getComment } from './api';\n\nclass App extends React.Component {\n  constructor(props) {\n    super (props);\n  \n    this.state = {\n      isLoaded: false,\n      posts: [],\n      buttonText: 'Load',\n     }\n  }\n  \n  loadData = async () => {\n    const posts = await getPost();  \n    const users = await getUser(); \n    const comments = await getComment(); \n    \n    this.setState({\n      buttonText: 'Loading...',\n    })\n\n    setTimeout(() =>(\n      this.setState({\n        posts: this.getPosts(posts, users, comments),\n        isLoaded: true,\n      })\n    ), 1000);    \n  }\n  \n  getPosts(posts, users, comments) {\n    return posts.map(item => ({\n              ...item,\n              author: users.find(user => item.userId === user.id),\n              commentData: comments.filter(comnt => item.id === comnt.postId),\n             })\n            );\n  }\n\nrender() {\n  const { posts, isLoaded } = this.state;\n  return (\n    <div className=\"App\">\n      { isLoaded ? (\n        <PostList items={posts} />\n      ) : (\n        <button className=\"loading_button\" onClick={this.loadData}>{this.state.buttonText}</button>\n      )}\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}